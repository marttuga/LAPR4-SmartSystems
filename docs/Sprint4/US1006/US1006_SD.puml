@startuml
autonumber
'hide footbox
actor "Sales Clerk" as SC
participant ":OrdersDispatchedUI" as UI <<presentation>>
participant ":OrdersDispatchedController" as CTRL <<application>>
participant ":ProductOrderService" as ProdS <<service>>
participant ":ProductOrder" as PORd <<domain>>
participant "PersistenceContext" as PC <<persistence>>
participant "RepositoryFactory" as RF <<factory>>
database "ProductOrderRepository" as ProdRepo <<repository>>

activate SC

SC -> UI : asks to view the list of previous orders made
activate UI

UI -> CTRL : findAllOrders()
activate CTRL
CTRL -> PC : repositories()

activate PC
PC -> RF : create
deactivate PC
activate RF
RF -> ProdRepo : create
deactivate RF
activate ProdRepo
deactivate ProdRepo
CTRL -> ProdRepo : getOrders= getOrders()

deactivate ProdRepo

CTRL --> UI :  Iterable<ProductOrderDTO>
deactivate CTRL

UI --> SC : shows list of orders
deactivate UI
SC -> UI : asks to see the ones with status: DISPATCHED
activate UI

UI -> CTRL : getOrderByStatus
activate CTRL
CTRL -> ProdS : getOrderByStatus= getOrderByStatus()
activate ProdS
CTRL --> UI :  Iterable<ProductOrderDTO>
deactivate CTRL
deactivate ProdS

UI --> SC :  shows list of orders with that status
deactivate UI

SC -> UI : asks which of these orders you want to change the status
activate UI

UI -> CTRL : getOrderToModified
activate CTRL
CTRL -> PC : repositories()

activate PC
PC -> RF : create
deactivate PC
activate RF
RF -> ProdRepo : create
activate ProdRepo
deactivate RF

deactivate ProdRepo
CTRL -> ProdRepo : findByOrderId()
activate ProdRepo

deactivate ProdRepo

CTRL -> PORd : changeOrderStatus= changeOrderStatus()
activate PORd
deactivate ProdRepo
deactivate PORd
CTRL -> ProdRepo : save()

CTRL --> UI :  getOrder
deactivate CTRL

UI --> SC :shows all data
deactivate UI
deactivate ProdS
deactivate UI

SC -> UI : confirms the data

activate UI
UI --> SC : informs operation success
deactivate UI

deactivate UI
deactivate SC

@enduml
